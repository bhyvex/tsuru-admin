.. Copyright 2015 tsuru-admin authors. All rights reserved.
   Use of this source code is governed by a BSD-style
   license that can be found in the LICENSE file.

**tsuru-admin** command supports administrative operations on a tsuru server.

.. note::

    In order to use ``tsuru-admin`` commands, a user should be an `admin user
    <http://docs.tsuru.io/en/latest/reference/config.html#admin-users>`_.
    To be an admin user you should be member of an `admin team <http://docs.tsuru.io/en/latest/reference/config.html#admin-team>`_.

Installing
==========

There are several ways to install **tsuru-admin**:

- `Downloading binaries (Mac OS X and Linux)`_
- `Using homebrew (Mac OS X only)`_
- `Using the PPA (Ubuntu only)`_
- `Using AUR (ArchLinux only)`_
- `Build from source (Linux and Mac OS X)`_

Downloading binaries (Mac OS X and Linux)
-----------------------------------------

We provide pre-built binaries for OS X and Linux, only for the amd64
architecture. You can download these binaries directly from the releases page:

* **tsuru-admin**: https://github.com/tsuru/tsuru-admin/releases

Using homebrew (Mac OS X only)
------------------------------

If you use Mac OS X and `homebrew <http://mxcl.github.com/homebrew/>`_, you may
use a custom tap to install **tsuru-admin**. First you need to add the tap:

.. highlight:: bash

::

$ brew tap tsuru/homebrew-tsuru

Now you can install **tsuru-admin**:

.. highlight:: bash

::

$ brew install tsuru-admin

Whenever a new version of **tsuru-admin** is out, you can just run:

.. highlight:: bash

::

$ brew update
$ brew upgrade tsuru-admin

For more details on taps, check `homebrew documentation
<https://github.com/Homebrew/homebrew/wiki/brew-tap>`_.

.. note::

    **tsuru-admin** requires Go 1.4. Make sure you have the last version
    of Go installed in your system.

Using the PPA (Ubuntu only)
---------------------------

Ubuntu users can install tsuru clients using ``apt-get`` and the `tsuru PPA
<https://launchpad.net/~tsuru/+archive/ppa>`_. You'll need to add the PPA
repository locally and run an ``apt-get update``:

.. highlight:: bash

::

$ sudo apt-add-repository ppa:tsuru/ppa
$ sudo apt-get update

Now you can install **tsuru-admin** clients:

.. highlight:: bash

::

$ sudo apt-get install tsuru-admin

Using AUR (ArchLinux only)
--------------------------

Archlinux users can build and install tsuru admin from AUR repository,
Is needed to have installed `yaourt <http://archlinux.fr/yaourt-en>`_ program.

You can run:


.. highlight:: bash

::

$ yaourt -S tsuru

Build from source (Linux and Mac OS X)
--------------------------------------

.. note::

    If you're feeling adventurous, you can try it on other systems, like
    FreeBSD, OpenBSD or even Windows. Please let us know about your progress!

`tsuru admin source <https://github.com/tsuru/tsuru-admin>`_ is written in `Go
<http://golang.org>`_, so before installing tsuru from source, please make sure
you have `installed and configured Go <http://golang.org/doc/install>`_.

With Go installed and configured, you can use ``go get`` to install **tsuru-admin**:

.. highlight:: bash

::

$ go get github.com/tsuru/tsuru-admin

After installing, you must set the target with the tsuru server URL,
something like:

Managing remote tsuru server endpoints
======================================

The target is the **tsuru** server to which all operations will be directed to.

.. highlight:: bash

::

    $ tsuru-admin target-add <label> <address> [--set-current|-s]
    $ tsuru-admin target-list
    $ tsuru-admin target-set <label>
    $ tsuru-admin target-remove <label>

With this set of commands you are be able to add a new labeled target,
set a target for usage, list the added targets and remove a target, respectively.

Check current version
=====================

To see the current version of **tsuru-admin** you should use the `version` command:

.. highlight:: bash

::

    $ tsuru-admin version
    tsuru-admin version 0.8.2.

Authentication
==============

login
-----

.. highlight:: bash

::

    $ tsuru-admin login [<email>]

Login will ask for the password and check if the user is successfully
authenticated. If so, the token generated by the **tsuru** server will be stored
in ${HOME}/.tsuru_token.

All tsuru-admin actions require the user to be authenticated (except `login` and `version`).

logout
------

.. highlight:: bash

::

    $ tsuru-admin logout

Logout will delete the token file and terminate the session within tsuru server.

Container management
====================

All the **container** commands below only exist when using the docker
provisioner.

.. _tsuru_admin_container_move_cmd:

container-move
--------------

.. highlight:: bash

::

    $ tsuru-admin container-move <container id> <to host>

This command allow you to specify a container id and a destination host, this
will create a new container on the destination host and remove the container
from its previous host.

.. _tsuru_admin_containers_move_cmd:

containers-move
---------------

.. highlight:: bash

::

    $ tsuru-admin containers-move <from host> <to host>

It allows you to move all containers from one host to another. This is useful
when doing maintenance on hosts. <from host> and <to host> must be host names
of existing docker nodes.

This command will go through the following steps:

* Enumerate all units at the origin host;
* For each unit, create a new unit at the destination host;
* Erase each unit from the origin host.

.. _tsuru_admin_containers_rebalance_cmd:

containers-rebalance
--------------------

.. highlight:: bash

::

    $ tsuru-admin containers-rebalance [--dry]

Instead of specifying hosts as in the containers-move command, this command
will automatically choose to which host each unit should be moved, trying to
distribute the units as evenly as possible.

The --dry flag runs the balancing algorithm without doing any real
modification. It will only print which units would be moved and where they
would be created.

Node management
===============

.. _tsuru_admin_docker_node_add_cmd:

docker-node-add
---------------

.. highlight:: bash

::

    $ tsuru-admin docker-node-add [param_name=param_value]... [--register]

This command add a node to your docker cluster. By default, this command will
call the configured IaaS to create a new machine. Every param will be sent to
the IaaS implementation.

You should configure in **tsuru.conf** the protocol and port for IaaS be able
to access your node (`you can see it here <config.html#iaas-configuration>`_).

If you want to just register an docker node, you should use the --register
flag with an **address=http://your-docker-node:docker-port**

Parameters have special meaning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* ``iaas=<iaas name>`` Which iaas provider should be used, if not set tsuru will use
  the default iaas specified in tsuru.conf file.

* ``template=<template name>`` A machine template with predefined parameters,
  additional parameters will override template ones. See
  :ref:`machine-template-add <tsuru_admin_machine_template_add_cmd>` command.

.. _tsuru_admin_docker_node_list_cmd:

docker-node-list
----------------

.. highlight:: bash

::

    $ tsuru-admin docker-node-list [-f/--filter <metadata>=<value>]

This command list all nodes present in the cluster. It will also show you metadata
associated to each node and the IaaS ID if the node was added using tsuru builtin
IaaS providers.

Using the ``-f/--filter`` flag, the user is able to filter the nodes that
appear in the list based on the key pairs displayed in the metadata column.
Users can also combine filters with multiple listings of ``-f``:

.. highlight:: bash

::

    $ tsuru-admin docker-node-list -f pool=mypool -f LastSuccess=2014-10-20T15:28:28-02:00

.. _tsuru_admin_docker_node_remove_cmd:

docker-node-remove
------------------

.. highlight:: bash

::

    $ tsuru-admin docker-node-remove <address> [--destroy]

This command removes a node from the cluster. Optionally it also destroys the
created IaaS machine if the ``--destroy`` flag is passed.

.. _tsuru_admin_platform_add_cmd:

Platform management
===================

.. warning::

    All the **platform** commands below only exist when using the docker
    provisioner.

platform-add
------------

.. highlight:: bash

::

    $ tsuru-admin platform-add <name> [--dockerfile]

This command allow you to add a new platform to your tsuru installation.
It will automatically create and build a whole new platform on tsuru server and
will allow your users to create apps based on that platform.

The --dockerfile flag is an URL to a dockerfile which will create your platform.

.. _tsuru_admin_platform_update_cmd:

platform-update
---------------

.. highlight:: bash

::

    $ tsuru-admin platform-update <name> [-d/--dockerfile]

This command allow you to update a platform in your tsuru installation.
It will automatically rebuild your platform and will flag apps to update
platform on next deploy.

The --dockerfile flag is an URL to a dockerfile which will update your platform.

platform-remove
---------------

.. highlight:: bash

::

    $ tsuru-admin platform-remove <platform name> [-y]

This command allow you to remove a platform. This command will not
remove a platform that is used by an application.

The -y flag assume "yes" as answer to all prompts and run non-interactively.

Machine management
==================

.. _tsuru_admin_machines_list_cmd:

machine-list
------------

.. highlight:: bash

::

    $ tsuru-admin machine-list

This command will list all machines created using ``docker-node-add`` and a IaaS
provider.

.. _tsuru_admin_machine_destroy_cmd:

machine-destroy
---------------

.. highlight:: bash

::

    $ tsuru-admin machine-destroy <machine id>

This command will destroy a IaaS machine based on its ID.

machine-template-list
---------------------

.. highlight:: bash

::

    $ tsuru-admin machine-template-list

This command will list all templates created using ``machine-template-add``.

.. _tsuru_admin_machine_template_add_cmd:

machine-template-add
--------------------

.. highlight:: bash

::

    $ tsuru-admin machine-template-add <name> <iaas> <param>=<value>...

This command creates a new machine template to be used with ``docker-node-add``
command. This template will contain a list of parameters that will be sent to the
IaaS provider.

machine-template-remove
-----------------------

.. highlight:: bash

::

    $ tsuru-admin machine-template-remove <name>

This command removes a machine template by name.

docker-healing-list
-------------------

.. highlight:: bash

::

    $ tsuru-admin docker-healing-list [--node] [--container]

This command will list all healing processes started for nodes or containers.

Plan management
===============

.. _tsuru_admin_plan_create:

plan-create
-----------

::

    $ tsuru-admin plan-create <name> -c/--cpu-share cpushare [-m/--memory memory] [-s/--swap swap] [-d/--default]

This command creates a new plan for being used when creating new apps.

The ``--cpushare`` flag defines a relative amount of cpu share for units created
in apps using this plan. This value is unitless and relative, so specifying the
same value for all plans means all units will equally share processing power.

The ``--memory`` flag defines how much physical memory a unit is able to use, in
bytes.

The ``--swap`` flag defines how much virtual swap memory a unit is able to use, in
bytes.

The ``--default`` flag sets this plan as the default plan. It means this plan will
be used when creating an app without explicitly setting a plan.


plan-remove
-----------

::

    $ tsuru-admin plan-remove <name>

This command removes an existing plan, it will no longer be available for newly
created apps. However, this won't change anything for existing apps that were
created using the removed plan. They will keep using the same value amount of
resources described by the plan.

User management
===============

user-list
---------

::

    $ tsuru-admin user-list

This command list all users in tsuru.

Quota management
================

Quotas are handled per application and user. Every user has a quota number for
applications. For example, users may have a default quota of 2 applications, so
whenever a user tries to create more than two applications, he/she will receive
a quota exceeded error. There are also per applications quota. This one limits
the maximum number of units that an application may have.

**tsuru-admin** can be used to see and change quota data.

change-app-quota
----------------

.. highlight:: bash

::

    $ tsuru-admin change-app-quota <user-email> <new-limit>

Changes the limit of units that an app can have. The new limit must be an
integer, it may also be "unlimited".

change-user-quota
-----------------

.. highlight:: bash

::

    $ tsuru-admin change-user-quota <user-email> <new-limit>

Changes the limit of apps that a user can create. The new limit must be an
integer, it may also be "unlimited".

view-app-quota
--------------

.. highlight:: bash

::

    $ tsuru-admin view-app-quota <app-name>

Displays the current usage and limit of the given app.

view-user-quota
---------------

.. highlight:: bash

::

    $ tsuru-admin view-user-quota <user-email>

Displays the current usage and limit of the user.

Another commands
================

.. _tsuru_admin_ssh_cmd:

ssh
---

.. highlight:: bash

::

    $ tsuru-admin ssh <container-id>

This command opens a SSH connection to the container, using the API server as a
proxy. The user may specify part of the ID of the container. For example:

.. highlight:: bash

::

    $ tsuru app-info -a myapp
    Application: tsuru-dashboard
    Repository: git@54.94.9.232:tsuru-dashboard.git
    Platform: python
    Teams: admin
    Address: tsuru-dashboard.54.94.9.232.xip.io
    Owner: admin@example.com
    Deploys: 1
    Units:
    +------------------------------------------------------------------+---------+
    | Unit                                                             | State   |
    +------------------------------------------------------------------+---------+
    | 39f82550514af3bbbec1fd204eba000546217a2fe6049e80eb28899db0419b2f | started |
    +------------------------------------------------------------------+---------+
    $ tsuru-admin ssh 39f8
    Welcome to Ubuntu 14.04 LTS (GNU/Linux 3.13.0-24-generic x86_64)
    ubuntu@ip-10-253-6-84:~$

log-remove
----------

.. highlight:: bash

::

    $ tsuru-admin log-remove [--app appname]

This command removes the application log from the tsuru database.

fix-containers
--------------

.. highlight:: bash

::

    $ tsuru-admin fix-containers

In some cases, like when a node is restarted, information about the containers
can be outdated in tsuru database, because docker changes the container
exposed port when the container is restarted.

This command verify if has a container with wrong data stored in the database
and fix this information.

app-unlock
----------

.. highlight:: bash

::

    $ tsuru-admin app-unlock -a <app-name> [-y]

Forces the removal of an app lock.
Use with caution, removing an active lock may cause inconsistencies.
